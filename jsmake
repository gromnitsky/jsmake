#!/usr/bin/env node

let path = require('path')
let fs = require('fs')
let cp = require('child_process')

class Location {
    constructor(src, line, col, row) {
	this.src = src || '-'
	this.line = line || -999
	this.col = col
	this.row = row
    }
    toString() {
	return [this.src, this.line, this.col, this.row].
	    filter( v => v !== undefined).join(':')
    }
}

class FToken {
    constructor(location, tag, val) {
	this.tag = tag
	this.val = val
	this.location = location
    }
    inspect() { return [this.location, this.tag, this.val].join('\t') }
}

class FirstTokenizer {
    // input -- a string to tokenize
    // src   -- a file name from which the input came from
    constructor(input, src) {
	this.input = input.split("\n")

	this.tokens = [
	    { type: 'comment', re: '#.*$' },
	    { type: 'recipe',  re: '\t.*$' },
	    { type: 'id', re: '[^=:]+' },
	    { type: 'op',  re: '[=:]'},
	    { type: 'rvalue',  re: '.*$' },
	]
	this.line = 0
	this.src = src
    }

    tokenize() {
	let r = []
	let line_prev = ''
	for (let line of this.input) {
	    this.line++
	    let column = 0
	    if (line.match(/^\s*$/)) continue

	    if (line.match(/\\$/)) { // join lines that end with `\`
		line_prev += line.replace(/\\$/, '')
		continue
	    } else {
		line = line_prev + line
		line_prev = ''
	    }

	    while (line.length) {
		for (let token of this.tokens) {
		    if (!line.length) break

		    let m = line.match(`^${token.re}`)
		    if (!m) continue
		    let skip = m.index + m[0].length
		    line = line.slice(skip)

		    r.push(new FToken(new Location(this.src, this.line,
						   column, column + skip - 1),
				      token.type, m[0].trim()))
		    column += skip
		}
	    }
	}
	return r
    }
}

class Rule {
    constructor(location, target, deps = '', recipes = []) {
	this.location = location
	if (location) {
	    delete this.location.col
	    delete this.location.row
	}
	this.target = target
	this.deps = deps || ''
	this.recipes = recipes
    }
    inspect() {
	return `Rule(${this.location}): ${this.target}: ${this.deps}` +
	    (this.recipes.length ? `\n>>\t${this.recipes.join("\n\t")}` : '')
    }
}

class Var {
    constructor(location, name, value = '') {
	this.location = location
	if (location) {
	    delete this.location.col
	    delete this.location.row
	}
	this.name = name
	this.value = value
    }
    inspect() { return `Var(${this.location}): ${this.name}='${this.value}'` }
}

class Parser {
    constructor(tokens) {
	this.tokens = tokens
	this.vars = {
	    'SHELL': new Var(new Location('def', -1), 'SHELL', '/bin/sh')
	}
	this.rules = []
    }

    parse() {
	let skip = -1
	for (let idx = 0; idx < this.tokens.length; ++idx) {
	    if (skip > idx) continue

	    let cur = this.tokens[idx]
	    let next = this.tokens[idx+1]

	    if (cur.tag === 'id' && next && next.tag === 'op') {
		skip = next.val === '=' ? this.variable(idx) : this.rule(idx)
	    } else if (cur.tag === 'comment') {
		// TODO: annotate the last rule
	    } else {
		throw new Error(`${cur.location}: unexpected ${cur.tag}: ${cur.val}`)
	    }
	}
    }

    rule(idx) {
	let entry = new Rule(this.tokens[idx].location, this.tokens[idx].val)

	idx += 2
	if (this.tokens[idx] && this.tokens[idx].tag === 'rvalue') {
	    entry.deps = this.tokens[idx].val
	    idx++
	}

	let ri = idx
	let recipes = []
	while (this.tokens[ri] && this.tokens[ri].tag === 'recipe') {
	    recipes.push(this.tokens[ri].val)
	    ri++
	}

	if (recipes.length) entry.recipes = recipes
	this.rules.push(entry)

	return ri
    }

    variable(idx) {
	let variable = new Var(this.tokens[idx].location, this.tokens[idx].val)
	this.vars[variable.name] = variable

	idx += 2
	if (this.tokens[idx] && this.tokens[idx].tag !== 'rvalue') return idx

	if (this.tokens[idx])
	    this.vars[variable.name].value = this.tokens[idx].val
	return idx+1
    }
}

let Functions = {
    dir: (names) => {
	return names.split(/\s+/).map( val => {
	    let p = path.dirname(val)
	    return p === '/' ? p : p + '/'
	}).join(' ')
    },
    subst: (from, to, text) => {
	return text.replace(new RegExp(from, 'g'), to)
    }
}

// a syntax tree node
class STNode {
    constructor(type, val) {
	this.type = type,
	this.val = val
	this.kids = []
    }
    add_kid(node) {
	this.kids.push(node)
	return this
    }
}

class Logger {
    constructor(verbosity, prefix) {
	this.verbosity = verbosity
	this.func = console.error.bind(console, prefix + ':')
    }
    write(level, ...args) {
	if (level <= this.verbosity) this.func(...args)
    }
}

class Expander {
    constructor(parser, functions) {
	this.parser = parser
	this.functions = functions || {}

	this.input = null
	this.tok = null
	this.location = new Location()
	this.logger = null	// an external logger
    }

    log(level, msg) {
	this.logger && this.logger.write(level, `${this.location}:`, msg)
    }

    advance() {
	if (!this.input.length) return this.tok = null // end of input

	let lexems = [
		/^[^$()]+/,
		/^./
	]
	for (let val of lexems) {
	    let m = this.input.match(val)
	    if (m) {
		this.tok = m[0]
		this.input = this.input.slice(m[0].length)
		return this.tok
	    }
	}
	throw new Error(`lexer failure: ${this.input}`)
    }

    // push STR back on input
    pushback(str) { this.input = str + this.input }

    parse(variable) {
	if (!(variable instanceof Var)) throw new Error('Expander#parse()')

	this.input = variable.value
	if (variable.location) this.location = variable.location
	let node = new STNode('$')

	this.advance()
	while (this.tok !== null) {
	    if (this.tok === '$') node.add_kid(this.func())
	    else {
		node.add_kid(new STNode('term', this.tok))
		this.advance()
	    }
	}
	return node
    }

    eat(expected_token) {
	if (this.tok !== expected_token)
	    throw new Error(`${this.location}: saw '${this.tok}', expected '${expected_token}'`)
	this.advance()
    }

    func() {
	this.eat('$')

	let single_char = this.tok[0] // $@, $<, etc
	if (/[^$()]/.test(single_char)) {
	    this.pushback(this.tok.slice(1))
	    this.advance()
	    return new STNode('$').add_kid(new STNode('term', single_char))
	}

	this.eat('(')

	if (this.tok === ')') {
	    this.advance()
	    this.log(0, 'an attempt to expand empty space')
	    return new STNode('term', '')
	}

	let node = new STNode('$')
	while (this.tok !== ')') {
	    if (this.tok === null)
		throw new Error(`${this.location}: expected ')'`)

	    if (this.tok === '$') node.add_kid(this.func())
	    else {
		node.add_kid(new STNode('term', this.tok))
		this.advance()
	    }
	}

	this.eat(')')
	return node
    }

    // rewrites this.parser.{vars,rules} with expanded values
    expand() {
	this.expand_vars()
	this.expand_rules()
    }

    expand_vars() {
	let e_vars = {}
	for (let key in this.parser.vars) {
	    let variable = this.parser.vars[key]

	    let e_key = this._expand(this.parse(new Var(variable.location, 'dummy1', key)))
	    // the value of the macro (the right-side, after the '=')
	    // is expanded when (a) the macro is requested during
	    // recipe execution, or (b) if it's mentioned in the
	    // left-size part (before the '='), or (c) when target lines
	    // are being expanded.
	    //
	    // i.e., we're NOT doing it here!
	    e_vars[e_key] = new Var(variable.location, e_key, variable.value)
	}
	this.parser.vars = e_vars
    }

    expand_rules() {
	let e_rules = this.parser.rules.map( rule => {
	    let e_target = this._expand(this.parse(new Var(rule.location, 'dummy2', rule.target)))
	    let entry = new Rule(rule.location, e_target)
	    if (rule.deps) entry.deps = this._expand(this.parse(new Var(null, 'dummy3', rule.deps)))
	    if (rule.recipes) {
	    	// rules are being expanded during the invocation, not here
	    	entry.recipes = rule.recipes
	    }
	    return entry
	})
	this.parser.rules = e_rules
    }

    // STR is a function name with args; check if the func name in the
    // list of known functions & if it is, run it
    func_run(str) {
	let fname = str.split(' ')[0]
	if (fname in this.functions) {
	    // remove the leading spaces only for the 1st arg
	    // before passing them all to the function
	    let fargs = str.split(' ').slice(1).join(' ').
	    	trimLeft().split(',')
	    return this.functions[fname].apply(this, fargs)
	}
	// return undefined if no valid func name was in STR
    }

    _expand(node, _start) {
	if (node.type === '$') {
	    return node.kids.map( kid => {
		if (kid.type === 'term') return kid.val

		// turtles all the way down
		let estr = this._expand(kid)
		let variable = this.parser.vars[estr]
		if (variable) {
		    // the value of the variable we've found can be
		    // expanded too!
		    if (_start === estr) throw new Error(`${this.location}: var '${estr}' references itself`)
		    return this._expand(this.parse(variable), _start || estr)
		}

		let funcall = this.func_run(estr)
		if (funcall !== undefined) return funcall

		// check the environment
		if (estr in process.env) return process.env[estr]

		this.log(0, `undefined variable '${estr}'`)
		return '?'	// FIXME

	    }).join('')
	} else {
	    return node.val
	}
    }
}

exports.Var = Var
exports.Rule = Rule
exports.FirstTokenizer = FirstTokenizer
exports.Logger = Logger
exports.Parser = Parser
exports.Expander = Expander

exports.Functions = Functions

let str2list = function(str) {
    return [...new Set(str.trim().split(/\s+/))].filter( val => val.length)
}

class Maker {
    constructor(parser, goals) {
	this.parser = parser
	this.rules = {
	    normal: {},
	    implicit: [],
	    generated: []
	}
	this.goals = goals
	this._default_goal = null
	this.logger = null	// an external logger
    }

    log(level, ...msg) {
	if (!this.logger) return
	if (msg[0] instanceof Rule)
	    this.logger.write(level, `${msg[0].location}:`, ...msg.slice(1))
	else
	    this.logger.write(level, ...msg)
    }

    default_goal() { return this.goals[0] || this._default_goal }

    glob(rule) {
	let r = new Rule(rule.location, null, null, rule.recipes);
	['target', 'deps'].forEach( attr => {
	    r[attr] = str2list(rule[attr]).map( val => {
		let r = cp.spawnSync(this.parser.vars.SHELL.value,
				     ['-c', `echo ${val}`])
		if (r.status !== 0) this.log(0, rule, `suspicious target: ${val}`)
		return r.status !== 0 ? val : r.stdout.toString()
	    }).join(' ')
	})
	return r
    }

    normalize() {
	for (let rule of this.parser.rules) {
	    rule = this.glob(rule)
	    if (rule.target.indexOf('%') !== -1) this.normalize_implicit(rule)
	    else this.normalize_normal(rule)
	}
    }

    // fill `this.rules.implicit` if RULE is a proper implicit rule
    normalize_implicit(rule) {
	let targets = str2list(rule.target)
	if (targets.length > 1) throw new Error(`${rule.location}: multiple targets aren't supported for implicit rules`)
	let target = targets[0]

	let prev_idx = this.rules.implicit.findIndex( v => v.target === target && JSON.stringify(v.deps) === JSON.stringify(str2list(rule.deps)))
	if (prev_idx !== -1 && !rule.recipes.length) {
	    // cancel out the existing implicit rule
	    this.rules.implicit.splice(prev_idx, 1)
	} else
	    this.rules.implicit.push(new Rule(rule.location, target, str2list(rule.deps), rule.recipes))
    }

    // fill `this.rules.normal` with rules from RULE; also set a default goal
    normalize_normal(rule) {
	for (let target of str2list(rule.target)) {
	    this._default_goal = this._default_goal || target

	    let deps = str2list(rule.deps)
	    let prev = this.rules.normal[target]
	    if (prev && rule.recipes.length) {
		this.log(0, rule, `overriding recipe for target '${target}', ${prev.location}`)
		deps = [...new Set(prev.deps.concat(deps))]
	    }
	    this.rules.normal[target] = new Rule(rule.location, target, deps, rule.recipes)
	}
    }

    // depth-first
    traverse(target, callback, _visited = {}) {
	let rule = this.rules.normal[target]
	if (!rule) return

	_visited[target] = _visited[target] || 1
	for (let val of rule.deps) {
	    if (_visited[val] === 1)
		throw new Error(`a cycle between '${target}' & '${val}'`)
	    _visited[val] = 2
	    if (callback) callback.call(this, val)
	    this.traverse(val, callback, _visited)
	}
    }

    // return the list of all the deps for TARGET
    deps(target, _dont_check_for_absentees) {
	let r = []
	this.traverse(target, v => r.push(v))
	if (_dont_check_for_absentees) return r

	let absent = r.filter( v => !this.rules.normal[v])
	if (absent.length) {
	    absent.forEach( t => this.genrule(t))
	    return this.deps(target, 1) // try again 1 more time (but only once)
	}
	return r
    }

    // add to `this.rules.normal` a newly generated rule for TARGET
    // using `this.rules.implicit` collection; may add nothing if
    // there are no suitable implicit rules available.
    genrule(target) {
	if (target in this.rules.normal) return true

	let candidates = []
	for (let rule of this.rules.implicit) {
	    let stem = Maker.stem(rule.target, target)
	    if (!stem) continue

	    let candidate = new Rule(rule.location, target)
	    candidate.stem = stem
	    candidate.rank = 0
	    let deps = []
	    for (let dep of rule.deps) {
		let prereq
		if (rule.target.indexOf('/') === -1) {
		    let st = Maker.split(stem)
		    let d = dep.replace('%', st.name)
		    prereq = st.dir === '.' ? d : [st.dir, d].join('/')
		} else
		    prereq = dep.replace('%', stem)

		if (!fs.existsSync(prereq)) {
		    candidate.rank -= 1
		    if (!this.genrule(prereq)) { // recursion!
			candidate.invalid = true
			break
		    }
		}
		deps.push(prereq)
	    }
	    if (candidate.invalid) continue

	    candidate.deps = deps
	    candidate.recipes = rule.recipes
	    candidates.push(candidate)
	}

	let nominee = Maker.nominee(candidates)
	if (!nominee) return false
	this.rules.normal[nominee.target] = nominee
	this.rules.generated.push(nominee) // for stats
	return true
    }

    // return the most desirable candidate among RULES, according to
    // the rank & the stem length
    static nominee(rules) {
	if (!rules.length) return

	let max_rank = rules.reduce( (acc, cur) => {
	    return Math.max(acc, cur.rank)
	}, Number.MIN_SAFE_INTEGER)
	let min_stem = rules.reduce( (acc, cur) => {
	    return { stem: cur.stem,
		     len: Math.min(acc.stem.length, cur.stem.length) }
	}, { stem: rules[0].stem, len: 0 })

	let ranks_are_equal = rules.every( rule => rule.rank === max_rank)
	let stem_len_are_equal = rules.every( rule => rule.stem.length === min_stem.len)
	if (ranks_are_equal)
	    return rules[rules.findIndex(v => v.stem.length === min_stem.len)]
	if (stem_len_are_equal)
	    return rules[rules.findIndex(v => v.rank === max_rank)]
	return rules[0]
    }

    static split(file) {
	return { dir: path.dirname(file), name: path.basename(file) }
    }

    static stem(pattern, file) {
	let affixes = function(f) {
	    let t = f.split('%')
	    return { prefix: t[0], suffix: t.slice(1).join('%') }
	}

	let aff = affixes(pattern)

	// does the prefix & the suffix of PATTERN match the p&s
	// of FILE?
	if (pattern.indexOf('/') === -1) {
	    // when the pattern doesn't contain '/', a dir name in
	    // FILE is removed from it before comparation & prepended
	    // to the final result
	    let fl = Maker.split(file)
	    if (aff.prefix === fl.name.slice(0, aff.prefix.length)
		&& aff.suffix === fl.name.slice(fl.name.length + -aff.suffix.length)) {
		let s = fl.name.slice(aff.prefix.length,
				      fl.name.length + -aff.suffix.length)
		return fl.dir === '.' ? s : [fl.dir, s].join('/')
	    }
	} else { // a simple case
	    if (aff.prefix === file.slice(0, aff.prefix.length)
		&& aff.suffix === file.slice(file.length + -aff.suffix.length)) {
		return file.slice(aff.prefix.length, file.length + -aff.suffix.length)
	    }
	}
    }

    mtime(file) {
	try {
	    return { error: null, mtime: fs.statSync(file).mtime }
	} catch (error) {
	    return { error }
	}
    }

    remake(target, forced, opt) {
	let rule = this.rules.normal[target]
	let verbosity = opt._last ? 0 : 1

	if (!rule && fs.existsSync(target)) {
	    this.log(verbosity, `nothing to be done for '${target}'`)
	    return forced	// carry the load
	}
	if (!rule) throw new Error(`no rule to make target '${target}'`)

	if (forced) {
	    this.recipe_run(target, opt)
	    return true
	}

	let timestamp = this.mtime(target)
	if (timestamp.error) {
	    if (timestamp.error.code === 'ENOENT') {
		// the target is missing
		this.recipe_run(target, opt)
		return true
	    } else
		throw err
	}

	// the file exists but is has no prerequisites
	if (!rule.deps.length) {
	    this.log(verbosity, `target '${target}' is up to date`)
	    return false
	}

	// get the min mtime of the prereqs
	let deps_mtime = rule.deps.map( file => {
	    let t = this.mtime(file)
	    return t.error ? new Date('1970') : t.mtime
	}).reduce( (min, cur) => Math.min(min, cur))

	if (timestamp.mtime < deps_mtime) {
	    this.recipe_run(target, opt)
	    return true
	}

	this.log(verbosity, `target '${target}' is up to date`)
	return false
    }

    recipe_run(target, opt) {
	let rule = this.rules.normal[target]
	if (!rule.recipes.length) {
	    this.log(opt._last ? 0 : 1, `nothing to be done for '${target}'`)
	    return
	}

	rule.recipes.forEach( line => {
	    let silent
	    let ignore_exit_code

	    if (opt.touch) {
		line = `touch ${target}`
	    } else {
		line = this.recipe_line_expand(rule, line)

		if (line[0] === '@') silent = true
		else if (line[0] === '-') ignore_exit_code = true

		if (/[@+-]/.test(line[0])) line = line.slice(1)
	    }

	    if (!silent || opt.dry_run) process.stdout.write(line + "\n")
	    if (opt.dry_run) return

	    try {
		process.stdout.write(cp.execSync(line))
	    } catch (err) {
		if (!ignore_exit_code) throw err
	    }
	})
    }

    // return a fully expanded line
    recipe_line_expand(rule, line) {
	let exp = new Expander(new Parser([]), Functions)
	exp.logger = this.logger
	exp.parser.vars = this.parser.vars

	// automatic variables
	exp.parser.vars['@'] = new Var(rule.location, '@', rule.target)
	exp.parser.vars['<'] = new Var(rule.location, '<', rule.deps[0])
	exp.parser.vars['^'] = new Var(rule.location, '^', rule.deps.join(' '))
	exp.parser.vars['*'] = new Var(rule.location, '*', rule.stem)

	return exp._expand(exp.parse(new Var(rule.location, 'dummy4', line)))
    }

    recompile(conf = {}) {
	(this.goals.length ? this.goals : [this.default_goal()]).forEach( goal => {
	    this.genrule(goal)
	    let deps = this.deps(goal)
	    this.log(1, `'${goal}' deps:`, deps)
	    this.log(2, `rules generated (${this.rules.generated.length}):\n`,
		     this.rules.generated)

	    let forced = false
	    deps.reverse().concat(goal).forEach( (prereq, idx) => {
		this.log(2, `TARGET: ${prereq}, forced=${forced}`)
		// tell remake() that this target was the goal
		let opt = conf
		if (idx === deps.length) opt = Object.assign({ _last: 1 }, conf)

		forced = this.remake(prereq, forced, opt)
	    })
	})
    }
}

exports.Maker = Maker

// CLI

let tokenize_file = function(file) {
    let str = fs.readFileSync(file === '-' ? '/dev/stdin' : file).toString()
    return new FirstTokenizer(str, file).tokenize()
}

let err = function(exit_code, ...args) {
    console.error('jsmake error:', ...args)
    process.exit(exit_code)
}

// Main
if (process.argv[1] === __filename) {
    let conf = {
	verbose: 0,
	touch: false,
	dry_run: false,
    }

    let makefiles = []
    let goals = []
    let user_vars = []

    let skip = -1
    let args = process.argv.slice(2)
    for (let idx=0; idx < args.length; ++idx) {
	if (skip >= idx) continue
	let opt = args[idx]

	if (opt === '-f') {
	    if (!args[idx+1]) err(2, '-f requires an argument')
	    makefiles.push(args[idx+1])
	    skip = idx+1	// eat the next arg
	}
	else if (opt === '-d') conf.verbose++
	else if (opt === '-t') conf.touch = true
	else if (opt === '-n') conf.dry_run = true
	else if (opt === '-v') {
	    console.log('0.0.1')
	    process.exit(0)
	}
	else if (opt.indexOf('=') !== -1) { // FOO=bar
	    user_vars = user_vars.concat(new FirstTokenizer(opt, 'cmd').tokenize())
	} else goals.push(opt)
    }

    if (!makefiles.length) err(2, 'no makefile found')
    let logger = new Logger(conf.verbose, 'jsmake')

    let tokens = [].concat(...makefiles.map( file => tokenize_file(file)))
	.concat(user_vars)
    logger.write(3, "tokens:\n", tokens)

    let parser = new Parser(tokens)
    parser.parse()
    logger.write(3, "parsed vars:\n", parser.vars)
    logger.write(3, "parsed rules:\n", parser.rules)

    let expander = new Expander(parser, Functions)
    expander.logger = logger
    expander.expand()
    logger.write(2, "expanded vars:\n", parser.vars)
    logger.write(3, "expanded rules:\n", parser.rules)

    let maker = new Maker(parser, goals)
    maker.logger = logger
    maker.normalize()
    logger.write(2, "normalized rules:\n", maker.rules)
    if (!maker.default_goal()) err(2, 'no targets')

    logger.write(1, 'DEFAULT GOAL:', maker.default_goal())
    logger.write(1, 'CL goals:', goals)

    maker.recompile(conf)
}
